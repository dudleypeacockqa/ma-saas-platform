name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  backend-tests:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest
        env:
          ENVIRONMENT: testing
          SECRET_KEY: test-secret-key
          DATABASE_URL: sqlite:///./test.db
          REDIS_URL: redis://localhost:6379/0
          STRIPE_SECRET_KEY: sk_test_placeholder
          STRIPE_PUBLISHABLE_KEY: pk_test_placeholder
          STRIPE_WEBHOOK_SECRET: whsec_test_placeholder
          CLERK_SECRET_KEY: sk_test_clerk
          CLERK_PUBLISHABLE_KEY: pk_test_clerk
          CLERK_WEBHOOK_SECRET: whsec_clerk
          ANTHROPIC_API_KEY: test
          OPENAI_API_KEY: test
        run: pytest --maxfail=1 --disable-warnings -q

      - name: Upload backend coverage artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: |
            backend/coverage_html
            backend/coverage.xml

  frontend-tests:
    name: Frontend Quality Gates
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Unit tests
        run: pnpm run test -- --runInBand

      - name: Build
        run: pnpm run build

      - name: Upload frontend coverage artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage

  infrastructure-checks:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform fmt check
        working-directory: infra/terraform
        run: terraform fmt -recursive -check

      - name: Terraform validate
        working-directory: infra/terraform/environments/example
        run: terraform validate

      - name: Verify K8s manifests build
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.2'

      - name: Render staging manifest
        run: kubectl kustomize infra/k8s/overlays/staging

      - name: Render production manifest
        run: kubectl kustomize infra/k8s/overlays/production

  security-compliance:
    name: Security & Compliance Scans
    runs-on: ubuntu-latest
    needs:
      - backend-tests
      - frontend-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tooling
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit bandit

      - name: Python dependency audit
        run: pip-audit -r backend/requirements.txt --format cyclonedx-json --output python-dependency-audit.json

      - name: Static analysis (Bandit)
        run: bandit -r backend/app -f json -o bandit-report.json

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Enable Corepack
        run: corepack enable

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Frontend dependency audit
        working-directory: frontend
        run: pnpm audit --audit-level high --json > ../frontend-audit.json

      - name: Dockerfile lint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/backend.Dockerfile

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            python-dependency-audit.json
            bandit-report.json
            frontend-audit.json
