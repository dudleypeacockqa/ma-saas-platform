[pytest]
# Pytest configuration for M&A SaaS Platform

# Minimum Python version
minversion = 6.0

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Add application root to Python path
pythonpath = .

# Command line options
addopts =
    # Verbose output
    -v

    # Show summary of all test outcomes
    -ra

    # Show local variables in tracebacks
    --tb=short

    # Coverage reporting
    --cov=app.auth.clerk_auth --cov=app.services.stripe_service
    --cov-report=html:coverage_html
    --cov-report=term-missing
    --cov-report=xml

    # Fail if coverage is below threshold
    --cov-fail-under=1

    # Show slowest 10 tests
    --durations=10

    # Strict markers - fail on unknown markers
    --strict-markers

    # Warnings configuration
    --strict-config
    -W error::DeprecationWarning
    -W error::PendingDeprecationWarning

    # Asyncio configuration
    --asyncio-mode=auto

# Markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, external dependencies)
    e2e: End-to-end tests (slowest, full stack)
    slow: Tests that take a long time to run
    smoke: Critical smoke tests for CI/CD
    api: API endpoint tests
    models: Database model tests
    services: Business logic service tests
    auth: Authentication and authorization tests
    clerk: Clerk integration tests
    stripe: Stripe integration tests
    ai: AI service tests (Claude, OpenAI)
    cache: Redis cache tests
    webhooks: Webhook handling tests
    tenant: Multi-tenancy isolation tests
    performance: Performance and load tests
    security: Security-related tests

# Asyncio configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = app
omit =
    */tests/*
    */test_*.py
    */__init__.py
    */migrations/*
    */alembic/*
    */config.py
    */main.py

branch = True
parallel = True

[coverage:report]
precision = 2
show_missing = True
skip_covered = False

exclude_lines =
    # Standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run
    if 0:
    if __name__ == .__main__.:
    if TYPE_CHECKING:

    # Don't complain about abstract methods
    @(abc\.)?abstractmethod

    # Don't complain about pass statements
    pass

[coverage:html]
directory = coverage_html

[coverage:xml]
output = coverage.xml
