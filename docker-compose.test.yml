# Docker Compose configuration for testing environment
version: '3.8'

services:
  # PostgreSQL test database
  postgres_test:
    image: postgres:16-alpine
    container_name: ma_saas_test_db
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: ma_saas_test
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"  # Use different port to avoid conflict with dev DB
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      # Initialize with required extensions
      - ./backend/scripts/init_test_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d ma_saas_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test_network

  # Redis test instance
  redis_test:
    image: redis:7-alpine
    container_name: ma_saas_test_redis
    ports:
      - "6380:6379"  # Use different port to avoid conflict with dev Redis
    command: redis-server --save "" --appendonly no  # Disable persistence for tests
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - test_network

  # Test runner (optional - for running tests in containerized environment)
  test_runner:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    container_name: ma_saas_test_runner
    depends_on:
      postgres_test:
        condition: service_healthy
      redis_test:
        condition: service_healthy
    environment:
      # Test database configuration
      DATABASE_URL: postgresql://test_user:test_password@postgres_test:5432/ma_saas_test

      # Redis configuration
      REDIS_URL: redis://redis_test:6379

      # Test environment flag
      TESTING: "true"

      # Disable external services for tests
      CLERK_SECRET_KEY: test_clerk_secret_key
      ANTHROPIC_API_KEY: test_anthropic_key
      OPENAI_API_KEY: test_openai_key

      # Fast test execution
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    volumes:
      - ./backend:/app
      - ./backend/tests:/app/tests
      - test_coverage:/app/coverage_html
    working_dir: /app
    command: |
      sh -c "
        echo 'Waiting for services...' &&
        sleep 5 &&
        echo 'Running tests...' &&
        pytest -v --cov=app --cov-report=html --cov-report=term
      "
    networks:
      - test_network

volumes:
  postgres_test_data:
    driver: local
  test_coverage:
    driver: local

networks:
  test_network:
    driver: bridge

# Usage:
# Start test environment: docker-compose -f docker-compose.test.yml up -d postgres_test redis_test
# Run tests: docker-compose -f docker-compose.test.yml up test_runner
# Stop test environment: docker-compose -f docker-compose.test.yml down
# Clean test data: docker-compose -f docker-compose.test.yml down -v
